// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"

  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Units {
  g
  hg
  kg
  ml
  cl
  dl
  l
  tsp
  msk
  krm
  st
  pkt
}

enum Role {
  USER
  ADMIN
}

model Recipe {
  id           Int                @id @default(autoincrement())
  title        String
  description  String
  ingredients  RecipeIngredient[]
  instructions String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  public     Boolean @default(false)
  viewableBy User[]  @relation("ViewableRecipes")

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  @@unique([title, createdById])
  @@index([title])
}

model RecipeIngredient {
  id     Int   @id @default(autoincrement())
  amount Float
  unit   Units

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([recipeId, ingredientId])
}

model Ingredient {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  defaultUnit Units?
  recepies    RecipeIngredient[]
  aliases     String[]

  @@index([name])
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role            Role      @default(USER)
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  recipesCreated  Recipe[]
  viewableRecipes Recipe[]  @relation("ViewableRecipes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
